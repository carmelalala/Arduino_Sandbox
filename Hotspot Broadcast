#include <NTPClient.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>

//const char* ssid = "hackymody00_2";//type your ssid
//const char* password = "5dm1nm1cm1c";//type your password

const char* ssid = "Smart Water Quality Tester";//type your ssid
const char* password = "testwater";//type your password
 
int ledPin = 2; // GPIO2 of ESP8266

String message = "";
bool messageReady = false;

WiFiServer server(80);//Service Port

void setup() {
  Serial.begin(115200);
  delay(10);
 
  pinMode(ledPin, OUTPUT);
   
  //WiFi.begin(ssid, password);
  WiFi.softAP(ssid, password);
 
  Serial.println("");
  //Serial.println("WiFi connected");
  Serial.println("Hotspot started");
   
  // Start the server
  server.begin();
  Serial.println("Server started");
 
  // Print the IP address
  Serial.print("Use this URL to connect: ");
  Serial.print("http://");
  Serial.print(WiFi.softAPIP());
  Serial.println("/");
}
 
void loop() {
 int relay;
  int relay_status;

  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
   
  // Wait until the client sends some data
  //Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
   
  // Read the first line of the request
  String request = client.readStringUntil('\r');
  //Serial.println(request);
  client.flush();
   
  // Match the request
 
  int value = LOW;
  if (request.indexOf("/LED=ON") != -1) {
    digitalWrite(ledPin, HIGH);
    value = HIGH;
  } 
  if (request.indexOf("/LED=OFF") != -1){
    digitalWrite(ledPin, LOW);
    value = LOW;
  }

  if (request.indexOf("/R1=ON") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "8";
    doc["status"] = "0";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
  if (request.indexOf("/R1=OFF") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "8";
    doc["status"] = "1";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
  
  if (request.indexOf("/R2=ON") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "9";
    doc["status"] = "0";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
  if (request.indexOf("/R2=OFF") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "9";
    doc["status"] = "1";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }

  if (request.indexOf("/R3=ON") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "10";
    doc["status"] = "0";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
  if (request.indexOf("/R3=OFF") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "10";
    doc["status"] = "1";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }

  if (request.indexOf("/R4=ON") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "11";
    doc["status"] = "0";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
  
  if (request.indexOf("/R4=OFF") != -1){
    DynamicJsonDocument doc(1024);
    doc["relay"] = "11";
    doc["status"] = "1";
    serializeJson(doc, Serial);
    DeserializationError error = deserializeJson(doc,message);
    message = Serial.readString();
  }
 
  //Set ledPin according to the request
  //digitalWrite(ledPin, value);
   
  // Return the response
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println(""); //  do not forget this one
  client.println("<!DOCTYPE html>");
  client.println("<html lang=\"en\">");
  client.println("<head>");
  client.println("<meta charset=\"UTF-8\">");
  client.println("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
  client.println("<title>Data Input Table with Gauge</title>");
  client.println("<style>");
  client.println("body { font-family: Arial, sans-serif; background-color: #f9f9f9; margin: 0; padding: 20px; color: #333; }");
  client.println("h2 { text-align: center; color: #007bff; margin-bottom: 30px; }");
  client.println("table { border-collapse: collapse; width: 50%; margin: auto; background-color: #fff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); border: 1px solid #ddd; }");
  client.println("th, td { padding: 10px; text-align: center; border-bottom: 1px solid #ddd; }");
  client.println("th { background-color: #f2f2f2; color: #333; }");
  client.println("tr:hover { background-color: #f2f2f2; }");
  client.println("input[type=\"text\"] { width: calc(100% - 16px); padding: 8px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; background-color: #f8f8f8; transition: border-color 0.3s; font-size: 16px; }");
  client.println("input[type=\"text\"]:focus { border-color: #007bff; }");
  client.println(".gauge-container { width: 200px; height: 200px; margin: 50px auto; position: relative; }");
  client.println(".gauge { width: 100%; height: 100%; border-radius: 50%; background-color: #ddd; position: relative; }");
  client.println(".gauge .fill { position: absolute; width: 100%; height: 100%; clip: rect(0, 100px, 200px, 0); border-radius: 50%; background-color: #007bff; transform-origin: center bottom; transform: rotate(0deg); }");
  client.println(".gauge .value { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 18px; color: #000000; font-weight: bold; }");
  client.println("</style>");
  client.println("</head>");
  client.println("<body>");
  client.println("<h2>Data Input Table with Gauge</h2>");
  client.println("<table id=\"dataTable\">");
  client.println("<tr>");
  client.println("<th>Timestamp</th>");
  client.println("<th>Turbidity Value</th>");
  client.println("<th>PH Value</th>");
  client.println("</tr>");
  client.println("</table>");
  client.println("<div class=\"gauge-container\">");
  client.println("<div class=\"gauge\">");
  client.println("<div class=\"fill\" id=\"gaugeFill\"></div>");
  client.println("<div class=\"value\" id=\"gaugeValue\">0%</div>");
  client.println("</div>");
  client.println("</div>");
  client.println("<script>");
  client.println("function updateTableAndGauge() {");
  client.println("var jsonData = document.getElementById('jsonData').value;");
  client.println("try {");
  client.println("var data = JSON.parse(jsonData);");
  client.println("var table = document.getElementById('dataTable');");
  client.println("table.innerHTML = '<tr><th>Timestamp</th><th>Turbidity Value</th><th>PH Value</th></tr>';");
  client.println("var row = `<tr><td>${data.Timestamp}</td><td>${data[\"Turbidity Value\"]}</td><td>${data[\"PH Value\"]}</td></tr>`;");
  client.println("table.innerHTML += row;");
  client.println("var total = parseFloat(data[\"Turbidity Value\"]) + parseFloat(data[\"PH Value\"]);");
  client.println("var fillPercentage = total * 100 / 200;");
  client.println("document.getElementById('gaugeFill').style.transform = `rotate(${fillPercentage * 1.8}deg)`;");
  client.println("document.getElementById('gaugeValue').innerText = `${fillPercentage.toFixed(2)}%`;");
  client.println("} catch (error) { console.error('Invalid JSON:', error); }");
  client.println("}");
  client.println("</script>");
  client.println("</body>");
  client.println("</html>");
 
  delay(1);
  //Serial.println("Client disconnected");
  //Serial.println("");
}
